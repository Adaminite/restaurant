(()=>{"use strict";var e={247:(e,n,t)=>{t.d(n,{Z:()=>c});var a=t(537),i=t.n(a),r=t(645),o=t.n(r)()(i());o.push([e.id,"*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n}\n/* Nav Styling */\n#nav{\n    display: flex;\n    justify-content: center;\n    gap: calc(20px + 2vw);\n    margin: 10px;\n\n\n    width: 100vw;\n}\n\nbutton{\n    background-color: white;\n    border: 2px solid black;\n    border-radius: 5px;\n    padding: 5px;\n}\n\n/* Home Styling */\n\n#home{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n.home-img{\n    display: block;\n    margin: 10px;\n\n    flex: 0 0 auto;\n    width: 500px;\n    height: auto;\n}\n\n#hours{\n    text-align: center;\n    margin: 10px;\n    \n    border: 2px solid black;\n\n    width: 500px;\n    font-size: calc(12px + 1vw);\n}\n\n#home-header, #contact-header, #menu-header{\n    font-size: 40px;\n    margin: 10px;\n    text-align: center;\n}\n\nul{\n    list-style-type: none;\n}\n\n\n\n\n/* Menu Styling */\n#menu{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.menu-img{\n    display: block;\n    width: 300px;\n    height: 200px;\n}\n\n#appetizers h2, #entrees h2{\n    text-align: center;\n}\n\n#appetizers, #entrees{\n    margin-top: 10px;\n    width: 650px;\n}\n\n.item-list{\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    gap: 20px;\n}\n\n.list-item{\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    text-align: center;\n    \n\n    padding: 10px;\n\n    height: 300px;\n    width: 300px;\n}\n\n.list-item p{\n    margin-top: 10px;\n}\n\n/* Contact Styling */\n\n#contact{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#contacts{\n    text-align: center;\n    margin: 10px;\n    \n    border: 2px solid black;\n\n    width: 500px;\n    font-size: calc(12px + 1vw);\n}\n\n#contacts li{\n    margin: 10px;\n}\n\n#newsletter{\n    display: flex;\n    justify-content: space-between;\n\n    padding: 20px;\n\n    border: 2px solid black;\n\n    width: 500px;\n}\n\n","",{version:3,sources:["webpack://./styles/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;IACV,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;;AAEvB;AACA,gBAAgB;AAChB;IACI,aAAa;IACb,uBAAuB;IACvB,qBAAqB;IACrB,YAAY;;;IAGZ,YAAY;AAChB;;AAEA;IACI,uBAAuB;IACvB,uBAAuB;IACvB,kBAAkB;IAClB,YAAY;AAChB;;AAEA,iBAAiB;;AAEjB;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;AACA;IACI,cAAc;IACd,YAAY;;IAEZ,cAAc;IACd,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,kBAAkB;IAClB,YAAY;;IAEZ,uBAAuB;;IAEvB,YAAY;IACZ,2BAA2B;AAC/B;;AAEA;IACI,eAAe;IACf,YAAY;IACZ,kBAAkB;AACtB;;AAEA;IACI,qBAAqB;AACzB;;;;;AAKA,iBAAiB;AACjB;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,cAAc;IACd,YAAY;IACZ,aAAa;AACjB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,gBAAgB;IAChB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,eAAe;IACf,8BAA8B;IAC9B,SAAS;AACb;;AAEA;;IAEI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;;IAEnB,kBAAkB;;;IAGlB,aAAa;;IAEb,aAAa;IACb,YAAY;AAChB;;AAEA;IACI,gBAAgB;AACpB;;AAEA,oBAAoB;;AAEpB;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;AACvB;;AAEA;IACI,kBAAkB;IAClB,YAAY;;IAEZ,uBAAuB;;IAEvB,YAAY;IACZ,2BAA2B;AAC/B;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,8BAA8B;;IAE9B,aAAa;;IAEb,uBAAuB;;IAEvB,YAAY;AAChB",sourcesContent:["*{\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n}\n/* Nav Styling */\n#nav{\n    display: flex;\n    justify-content: center;\n    gap: calc(20px + 2vw);\n    margin: 10px;\n\n\n    width: 100vw;\n}\n\nbutton{\n    background-color: white;\n    border: 2px solid black;\n    border-radius: 5px;\n    padding: 5px;\n}\n\n/* Home Styling */\n\n#home{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n.home-img{\n    display: block;\n    margin: 10px;\n\n    flex: 0 0 auto;\n    width: 500px;\n    height: auto;\n}\n\n#hours{\n    text-align: center;\n    margin: 10px;\n    \n    border: 2px solid black;\n\n    width: 500px;\n    font-size: calc(12px + 1vw);\n}\n\n#home-header, #contact-header, #menu-header{\n    font-size: 40px;\n    margin: 10px;\n    text-align: center;\n}\n\nul{\n    list-style-type: none;\n}\n\n\n\n\n/* Menu Styling */\n#menu{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.menu-img{\n    display: block;\n    width: 300px;\n    height: 200px;\n}\n\n#appetizers h2, #entrees h2{\n    text-align: center;\n}\n\n#appetizers, #entrees{\n    margin-top: 10px;\n    width: 650px;\n}\n\n.item-list{\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    gap: 20px;\n}\n\n.list-item{\n\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    text-align: center;\n    \n\n    padding: 10px;\n\n    height: 300px;\n    width: 300px;\n}\n\n.list-item p{\n    margin-top: 10px;\n}\n\n/* Contact Styling */\n\n#contact{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n#contacts{\n    text-align: center;\n    margin: 10px;\n    \n    border: 2px solid black;\n\n    width: 500px;\n    font-size: calc(12px + 1vw);\n}\n\n#contacts li{\n    margin: 10px;\n}\n\n#newsletter{\n    display: flex;\n    justify-content: space-between;\n\n    padding: 20px;\n\n    border: 2px solid black;\n\n    width: 500px;\n}\n\n"],sourceRoot:""}]);const c=o},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",a=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),a&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),a&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,a,i,r){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(a)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(o[l]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);a&&o[s[0]]||(void 0!==r&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=r),t&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=t):s[2]=t),i&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=i):s[4]="".concat(i)),n.push(s))}},n}},537:e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(i," */"),o=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(o).concat([r]).join("\n")}return[n].join("\n")}},379:e=>{var n=[];function t(e){for(var t=-1,a=0;a<n.length;a++)if(n[a].identifier===e){t=a;break}return t}function a(e,a){for(var r={},o=[],c=0;c<e.length;c++){var l=e[c],d=a.base?l[0]+a.base:l[0],s=r[d]||0,A="".concat(d," ").concat(s);r[d]=s+1;var p=t(A),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var m=i(u,a);a.byIndex=c,n.splice(c,0,{identifier:A,updater:m,references:1})}o.push(A)}return o}function i(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,i){var r=a(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<r.length;o++){var c=t(r[o]);n[c].references--}for(var l=a(e,i),d=0;d<r.length;d++){var s=t(r[d]);0===n[s].references&&(n[s].updater(),n.splice(s,1))}r=l}}},569:e=>{var n={};e.exports=function(e,t){var a=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var a="";t.supports&&(a+="@supports (".concat(t.supports,") {")),t.media&&(a+="@media ".concat(t.media," {"));var i=void 0!==t.layer;i&&(a+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),a+=t.css,i&&(a+="}"),t.media&&(a+="}"),t.supports&&(a+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),n.styleTagTransform(a,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},139:(e,n,t)=>{e.exports=t.p+"e40fbf4862e40df5b1d7.jpeg"}},n={};function t(a){var i=n[a];if(void 0!==i)return i.exports;var r=n[a]={id:a,exports:{}};return e[a](r,r.exports,t),r.exports}t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var a=n.getElementsByTagName("script");a.length&&(e=a[a.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),(()=>{var e=t(139),n=t(379),a=t.n(n),i=t(795),r=t.n(i),o=t(569),c=t.n(o),l=t(565),d=t.n(l),s=t(216),A=t.n(s),p=t(589),u=t.n(p),m=t(247),h={};h.styleTagTransform=u(),h.setAttributes=d(),h.insert=c().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=A(),a()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals;const f=function(){let n=document.createElement("div");return n.id="home",n.appendChild(function(){let e=document.createElement("h1");return e.textContent="Omar's Kabob House",e.id="home-header",e}()),n.appendChild(function(){let n=document.createElement("img");return n.setAttribute("src",e),n.setAttribute("alt","A picture of our chicken kabob"),n.classList.add("home-img"),n}()),n.appendChild(function(){let e=document.createElement("div");e.id="hours";let n=document.createElement("h2");n.textContent="Hours",e.appendChild(n);let t=document.createElement("ul");const a=["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"];for(let e of a){let n=document.createElement("li");n.textContent=e,n.textContent+="Sunday"===e?": Closed":"Saturday"===e?": 10:00am - 3:00pm":": 9:00am - 5:00pm",t.appendChild(n)}return e.appendChild(t),e}()),n},C=function(){let e=document.createElement("div");return e.id="contact",e.appendChild(function(){let e=document.createElement("h1");return e.textContent="Contact Us",e.id="contact-header",e}()),e.appendChild(function(){let e=document.createElement("div");e.id="contacts";let n=document.createElement("ul"),t=document.createElement("li");t.textContent="Phone: 1-234-567-8901";let a=document.createElement("li");a.textContent="Restaurant Email: omarskabobhouse@real.com";let i=document.createElement("li");return i.textContent="Owner Email: omar@real.com",n.appendChild(t),n.appendChild(a),n.appendChild(i),e.appendChild(n),e}()),e.appendChild(function(){let e=document.createElement("div");e.id="newsletter";let n=document.createElement("h3");n.textContent="Sign up for our newsletter!";let t=document.createElement("button");return t.textContent="Sign Up",e.appendChild(n),e.appendChild(t),e}()),e};function x(e,n,t,a){return{getName:()=>e,getPrice:()=>"$"+n,getSrc:()=>t,getDesc:()=>a}}const g=(()=>{let n=[],t=[];return{compileMenu:()=>{let a=document.createElement("div");return a.id="menu",a.appendChild((()=>{let e=document.createElement("h1");return e.textContent="Our Menu",e.id="menu-header",e})()),a.appendChild((()=>{n.push(x("Samosas",3.99,"#","A South Asian favoriate. Fried flour encasing peas, carrots, onions, peppers, and your choice of potato or chicken.")),n.push(x("Chick Peas",2.99,"#","Cup of Indian chickpeas (Garbanzo beans) served with a side of naan bread. "));let t=document.createElement("div");t.id="appetizers";let a=document.createElement("h2");a.textContent="Appetizers",t.appendChild(a);let i=document.createElement("div");i.classList.add("item-list");for(let t of n){let n=document.createElement("div");n.classList.add("list-item");let a=document.createElement("h3");a.textContent=t.getName()+"  "+t.getPrice();let r=document.createElement("img");r.setAttribute("src",e),r.classList.add("menu-img");let o=document.createElement("p");o.textContent=t.getDesc(),n.appendChild(a),n.appendChild(r),n.appendChild(o),i.appendChild(n)}return t.appendChild(i),t})()),a.appendChild((()=>{t.push(x("Chicken Kabob",10.99,"#","A South Asian and mediteranian classic. 4 pieces of perfectly grilled marinated chicken served with salad and a choice of white/brown rice.")),t.push(x("Kofta Kabob",10.99,"#","Our most popular item. 2 pieces of skewered beef kabob served with salad and a choice of white/brown rice.")),t.push(x("Chicken Seekh Kabob",10.99,"#","A different take on the chicken kabob. 2 pieces skewered chicken infused with peppers, onions, and spices. Served with naan bread and lentils")),t.push(x("Lamb Kabob",13.99,"#","A true delicacy. 4 pieces of Halal, grass-fed, marinated lamb served with a choice of naan bread/rice and salad/lentils"));let n=document.createElement("div");n.id="entrees";let a=document.createElement("h2");a.textContent="Entrees",n.appendChild(a);let i=document.createElement("div");i.classList.add("item-list");for(let n of t){let t=document.createElement("div");t.classList.add("list-item");let a=document.createElement("h3");a.textContent=n.getName()+"  "+n.getPrice();let r=document.createElement("img");r.setAttribute("src",e),r.classList.add("menu-img");let o=document.createElement("p");o.textContent=n.getDesc(),t.appendChild(a),t.appendChild(r),t.appendChild(o),i.appendChild(t)}return n.appendChild(i),n})()),a}}})().compileMenu;(()=>{let e=document.getElementById("content"),n="";const t={Home:f(),Contact:C(),Menu:g()},a=a=>{let i=a.target.textContent;i!==n&&(e.removeChild(e.lastElementChild),e.appendChild(t[i]),n=i)};return{renderLanding:()=>{e.appendChild((()=>{let e=document.createElement("div");e.id="nav";const n=["Home","Menu","Contact"];for(let t of n){let n=document.createElement("button");n.textContent=t,n.addEventListener("click",a),e.appendChild(n)}return e})()),e.appendChild(f()),n="Home"}}})().renderLanding()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,